
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00802000  00000ab8  00000b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000075  00802036  00802036  00000b82  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000b98  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001db2  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a5  00000000  00000000  00002a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bf  00000000  00000000  00002db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00003178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000efa  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002de  00000000  00000000  000041e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000044c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
   8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
   c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  50:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_20>
  54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  e8:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_58>
  ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 16c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df e2       	ldi	r29, 0x2F	; 47
 182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_copy_data>:
 184:	10 e2       	ldi	r17, 0x20	; 32
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e2       	ldi	r27, 0x20	; 32
 18a:	e8 eb       	ldi	r30, 0xB8	; 184
 18c:	fa e0       	ldi	r31, 0x0A	; 10
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
 190:	05 90       	lpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a6 33       	cpi	r26, 0x36	; 54
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
 19a:	20 e2       	ldi	r18, 0x20	; 32
 19c:	a6 e3       	ldi	r26, 0x36	; 54
 19e:	b0 e2       	ldi	r27, 0x20	; 32
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ab 3a       	cpi	r26, 0xAB	; 171
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	0e 94 0c 02 	call	0x418	; 0x418 <main>
 1ae:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <_exit>

000001b2 <__bad_interrupt>:
 1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <Debug_SendByte>:




void Debug_SendByte(uint8_t data){
	while(!(USARTE0.STATUS & USART_DREIF_bm));
 1b6:	90 91 a1 0a 	lds	r25, 0x0AA1
 1ba:	95 ff       	sbrs	r25, 5
 1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <Debug_SendByte>
	USARTE0.DATA = data;	
 1be:	80 93 a0 0a 	sts	0x0AA0, r24
 1c2:	08 95       	ret

000001c4 <Debug_Init>:
volatile uint16_t   Debug_writeLocation = 0;

static FILE mystdout = FDEV_SETUP_STREAM (Debug_SendByte, NULL, _FDEV_SETUP_WRITE);

void Debug_Init(void){
	PORTE.DIRSET = 0b00001000;			// tx line
 1c4:	e0 e8       	ldi	r30, 0x80	; 128
 1c6:	f6 e0       	ldi	r31, 0x06	; 6
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = 0b00000100;			// rx line
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	82 83       	std	Z+2, r24	; 0x02
	
	USARTE0.CTRLC = USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc ; 	    				
 1d0:	e0 ea       	ldi	r30, 0xA0	; 160
 1d2:	fa e0       	ldi	r31, 0x0A	; 10
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	85 83       	std	Z+5, r24	; 0x05
	
	USARTE0.BAUDCTRLA = 207 & 0xFF;								// 32mhz @9600
 1d8:	8f ec       	ldi	r24, 0xCF	; 207
 1da:	86 83       	std	Z+6, r24	; 0x06
	USARTE0.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(207 >> 8);
 1dc:	17 82       	std	Z+7, r1	; 0x07
	
	USARTE0.CTRLB |= USART_RXEN_bm;
 1de:	84 81       	ldd	r24, Z+4	; 0x04
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLB |= USART_TXEN_bm;
 1e4:	84 81       	ldd	r24, Z+4	; 0x04
 1e6:	88 60       	ori	r24, 0x08	; 8
 1e8:	84 83       	std	Z+4, r24	; 0x04
	
	USARTE0.CTRLA |= USART_RXCINTLVL_LO_gc;
 1ea:	83 81       	ldd	r24, Z+3	; 0x03
 1ec:	80 61       	ori	r24, 0x10	; 16
 1ee:	83 83       	std	Z+3, r24	; 0x03
	
    stdout = &mystdout;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e2       	ldi	r25, 0x20	; 32
 1f4:	80 93 a7 20 	sts	0x20A7, r24
 1f8:	90 93 a8 20 	sts	0x20A8, r25
 1fc:	08 95       	ret

000001fe <Debug_CharReadyToRead>:
	while(!(USARTE0.STATUS & USART_DREIF_bm));
	USARTE0.DATA = data;	
}

bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
 1fe:	40 91 3a 20 	lds	r20, 0x203A
 202:	50 91 3b 20 	lds	r21, 0x203B
 206:	20 91 3c 20 	lds	r18, 0x203C
 20a:	30 91 3d 20 	lds	r19, 0x203D
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	42 17       	cp	r20, r18
 212:	53 07       	cpc	r21, r19
 214:	09 f4       	brne	.+2      	; 0x218 <Debug_CharReadyToRead+0x1a>
 216:	80 e0       	ldi	r24, 0x00	; 0
		return false;  
	} else { 
		return true;
	}
}
 218:	08 95       	ret

0000021a <Debug_GetByte>:


uint8_t Debug_GetByte(bool blocking){
	if(blocking){
 21a:	81 11       	cpse	r24, r1
 21c:	19 c0       	rjmp	.+50     	; 0x250 <Debug_GetByte+0x36>
		while(!Debug_CharReadyToRead());
	}
	
	uint8_t tmp = DebugBuffer[Debug_readLocation];
 21e:	e0 91 3c 20 	lds	r30, 0x203C
 222:	f0 91 3d 20 	lds	r31, 0x203D
 226:	e2 5c       	subi	r30, 0xC2	; 194
 228:	ff 4d       	sbci	r31, 0xDF	; 223
 22a:	80 81       	ld	r24, Z
	Debug_readLocation++;
 22c:	20 91 3c 20 	lds	r18, 0x203C
 230:	30 91 3d 20 	lds	r19, 0x203D
 234:	2f 5f       	subi	r18, 0xFF	; 255
 236:	3f 4f       	sbci	r19, 0xFF	; 255
 238:	20 93 3c 20 	sts	0x203C, r18
 23c:	30 93 3d 20 	sts	0x203D, r19
	if(Debug_readLocation >= 100){
 240:	20 91 3c 20 	lds	r18, 0x203C
 244:	30 91 3d 20 	lds	r19, 0x203D
 248:	24 36       	cpi	r18, 0x64	; 100
 24a:	31 05       	cpc	r19, r1
 24c:	30 f4       	brcc	.+12     	; 0x25a <Debug_GetByte+0x40>
 24e:	08 95       	ret
}


uint8_t Debug_GetByte(bool blocking){
	if(blocking){
		while(!Debug_CharReadyToRead());
 250:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Debug_CharReadyToRead>
 254:	88 23       	and	r24, r24
 256:	e1 f3       	breq	.-8      	; 0x250 <Debug_GetByte+0x36>
 258:	e2 cf       	rjmp	.-60     	; 0x21e <Debug_GetByte+0x4>
	}
	
	uint8_t tmp = DebugBuffer[Debug_readLocation];
	Debug_readLocation++;
	if(Debug_readLocation >= 100){
		Debug_readLocation=0;
 25a:	10 92 3c 20 	sts	0x203C, r1
 25e:	10 92 3d 20 	sts	0x203D, r1
	}
	return tmp;
}
 262:	08 95       	ret

00000264 <__vector_58>:

ISR(USARTE0_RXC_vect){
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	DebugBuffer[Debug_writeLocation] = USARTE0.DATA;
 276:	e0 91 3a 20 	lds	r30, 0x203A
 27a:	f0 91 3b 20 	lds	r31, 0x203B
 27e:	80 91 a0 0a 	lds	r24, 0x0AA0
 282:	e2 5c       	subi	r30, 0xC2	; 194
 284:	ff 4d       	sbci	r31, 0xDF	; 223
 286:	80 83       	st	Z, r24
	Debug_writeLocation++;
 288:	80 91 3a 20 	lds	r24, 0x203A
 28c:	90 91 3b 20 	lds	r25, 0x203B
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	80 93 3a 20 	sts	0x203A, r24
 296:	90 93 3b 20 	sts	0x203B, r25
	if(Debug_writeLocation >= 100){
 29a:	80 91 3a 20 	lds	r24, 0x203A
 29e:	90 91 3b 20 	lds	r25, 0x203B
 2a2:	84 36       	cpi	r24, 0x64	; 100
 2a4:	91 05       	cpc	r25, r1
 2a6:	20 f0       	brcs	.+8      	; 0x2b0 <__vector_58+0x4c>
		Debug_writeLocation = 0;
 2a8:	10 92 3a 20 	sts	0x203A, r1
 2ac:	10 92 3b 20 	sts	0x203B, r1
	}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_20>:
        }
        
    }
}

ISR(TCC1_OVF_vect){
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31



    if(runServo){
 2e4:	80 91 a2 20 	lds	r24, 0x20A2
 2e8:	88 23       	and	r24, r24
 2ea:	a1 f1       	breq	.+104    	; 0x354 <__vector_20+0x92>

        servoSpeedCounter++;
 2ec:	80 91 37 20 	lds	r24, 0x2037
 2f0:	90 91 38 20 	lds	r25, 0x2038
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	80 93 37 20 	sts	0x2037, r24
 2fa:	90 93 38 20 	sts	0x2038, r25
        if(servoSpeedCounter > 50){
 2fe:	80 91 37 20 	lds	r24, 0x2037
 302:	90 91 38 20 	lds	r25, 0x2038
 306:	c3 97       	sbiw	r24, 0x33	; 51
 308:	28 f1       	brcs	.+74     	; 0x354 <__vector_20+0x92>
            servoSpeedCounter = 0;
 30a:	10 92 37 20 	sts	0x2037, r1
 30e:	10 92 38 20 	sts	0x2038, r1
                currentCapCounter = 0;
            }
*/


            if (TCC0.CCA > 500) {
 312:	80 91 28 08 	lds	r24, 0x0828
 316:	90 91 29 08 	lds	r25, 0x0829
 31a:	85 3f       	cpi	r24, 0xF5	; 245
 31c:	91 40       	sbci	r25, 0x01	; 1
 31e:	50 f0       	brcs	.+20     	; 0x334 <__vector_20+0x72>
                TCC0.CCA--;
 320:	80 91 28 08 	lds	r24, 0x0828
 324:	90 91 29 08 	lds	r25, 0x0829
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	80 93 28 08 	sts	0x0828, r24
 32e:	90 93 29 08 	sts	0x0829, r25
 332:	10 c0       	rjmp	.+32     	; 0x354 <__vector_20+0x92>
            } else {
                printf("HIT END\r");
 334:	8e e0       	ldi	r24, 0x0E	; 14
 336:	90 e2       	ldi	r25, 0x20	; 32
 338:	9f 93       	push	r25
 33a:	8f 93       	push	r24
 33c:	0e 94 9d 02 	call	0x53a	; 0x53a <printf>
                runServo = false;
 340:	10 92 a2 20 	sts	0x20A2, r1
                TCC0.CCA = 750;
 344:	8e ee       	ldi	r24, 0xEE	; 238
 346:	92 e0       	ldi	r25, 0x02	; 2
 348:	80 93 28 08 	sts	0x0828, r24
 34c:	90 93 29 08 	sts	0x0829, r25
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
            }
        }

    }
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <Interrupts_Init>:
	CCPWrite( &CLK.CTRL, CLK_SCLKSEL_RC32M_gc);     // change from 2MHz to 32MHz
}

void Interrupts_Init(void){
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 376:	e0 ea       	ldi	r30, 0xA0	; 160
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	81 60       	ori	r24, 0x01	; 1
 37e:	82 83       	std	Z+2, r24	; 0x02
	sei();
 380:	78 94       	sei
 382:	08 95       	ret

00000384 <Current_Read>:
}

uint16_t Current_Read(uint8_t channel){
    uint16_t hi, lo;

    currentPORT.OUTCLR = currentCLK_bm;
 384:	90 e8       	ldi	r25, 0x80	; 128
 386:	90 93 46 06 	sts	0x0646, r25
    currentPORT.OUTCLR = currentCS_bm;
 38a:	90 e1       	ldi	r25, 0x10	; 16
 38c:	90 93 46 06 	sts	0x0646, r25

    currentSPI.DATA = 1;
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	90 93 c3 08 	sts	0x08C3, r25
    while(!(currentSPI.STATUS & SPI_IF_bm));
 396:	90 91 c2 08 	lds	r25, 0x08C2
 39a:	97 ff       	sbrs	r25, 7
 39c:	fc cf       	rjmp	.-8      	; 0x396 <Current_Read+0x12>

    currentSPI.DATA = channel;
 39e:	80 93 c3 08 	sts	0x08C3, r24
    while(!(currentSPI.STATUS & SPI_IF_bm));
 3a2:	80 91 c2 08 	lds	r24, 0x08C2
 3a6:	87 ff       	sbrs	r24, 7
 3a8:	fc cf       	rjmp	.-8      	; 0x3a2 <Current_Read+0x1e>
    hi = (currentSPI.DATA & 0b0001111);
 3aa:	80 91 c3 08 	lds	r24, 0x08C3
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	90 e0       	ldi	r25, 0x00	; 0

    currentSPI.DATA = 0;
 3b2:	10 92 c3 08 	sts	0x08C3, r1
    while(!(currentSPI.STATUS & SPI_IF_bm));
 3b6:	20 91 c2 08 	lds	r18, 0x08C2
 3ba:	27 ff       	sbrs	r18, 7
 3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <Current_Read+0x32>
    lo = currentSPI.DATA;
 3be:	20 91 c3 08 	lds	r18, 0x08C3

    currentPORT.OUTSET = currentCS_bm;
 3c2:	30 e1       	ldi	r19, 0x10	; 16
 3c4:	30 93 45 06 	sts	0x0645, r19

    return (lo + (hi << 8));
 3c8:	98 2f       	mov	r25, r24
 3ca:	88 27       	eor	r24, r24
}
 3cc:	82 0f       	add	r24, r18
 3ce:	91 1d       	adc	r25, r1
 3d0:	08 95       	ret

000003d2 <CCPWrite>:


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
 3d2:	0f 93       	push	r16
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
 3de:	2f b7       	in	r18, 0x3f	; 63
 3e0:	29 83       	std	Y+1, r18	; 0x01
    cli();
 3e2:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
    
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 3e4:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 3e6:	fc 01       	movw	r30, r24
 3e8:	08 ed       	ldi	r16, 0xD8	; 216
 3ea:	04 bf       	out	0x34, r16	; 52
 3ec:	60 83       	st	Z, r22
                 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
                 : "r16", "r30", "r31"
                 );
    
#endif
	SREG = saved_sreg;
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	8f bf       	out	0x3f, r24	; 63
}
 3f2:	0f 90       	pop	r0
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <Clock_Init>:

    }
}

void Clock_Init(void){
	OSC.CTRL |= OSC_RC32MEN_bm;                     // turn on 32MHz internal RC oscillator
 3fc:	80 91 50 00 	lds	r24, 0x0050
 400:	82 60       	ori	r24, 0x02	; 2
 402:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));         // wait for it to be ready
 406:	80 91 51 00 	lds	r24, 0x0051
 40a:	81 ff       	sbrs	r24, 1
 40c:	fc cf       	rjmp	.-8      	; 0x406 <Clock_Init+0xa>
	CCPWrite( &CLK.CTRL, CLK_SCLKSEL_RC32M_gc);     // change from 2MHz to 32MHz
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	80 e4       	ldi	r24, 0x40	; 64
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <CCPWrite>

00000418 <main>:
#define currentCapThreshold   5

int main(void){


    Clock_Init();
 418:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Clock_Init>
    Debug_Init();
 41c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Debug_Init>
    printf("Starting up!\r");
 420:	87 e1       	ldi	r24, 0x17	; 23
 422:	90 e2       	ldi	r25, 0x20	; 32
 424:	9f 93       	push	r25
 426:	8f 93       	push	r24
 428:	0e 94 9d 02 	call	0x53a	; 0x53a <printf>

    // 100hz for servo upkeep
    TCC1.PER = 49;
 42c:	81 e3       	ldi	r24, 0x31	; 49
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	80 93 66 08 	sts	0x0866, r24
 434:	90 93 67 08 	sts	0x0867, r25
    TCC1.CTRLA = TC_CLKSEL_DIV64_gc;
 438:	25 e0       	ldi	r18, 0x05	; 5
 43a:	20 93 40 08 	sts	0x0840, r18
    TCC1.INTCTRLA = TC_CCAINTLVL_LO_gc;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	80 93 46 08 	sts	0x0846, r24


    ADCA.CH1.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;    // set input mode
 444:	80 93 28 02 	sts	0x0228, r24
    ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;           // set mux to read channel 0, pin A1
 448:	98 e0       	ldi	r25, 0x08	; 8
 44a:	90 93 29 02 	sts	0x0229, r25


    ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV16_gc;
 44e:	90 91 04 02 	lds	r25, 0x0204
 452:	98 7f       	andi	r25, 0xF8	; 248
 454:	92 60       	ori	r25, 0x02	; 2
 456:	90 93 04 02 	sts	0x0204, r25

    ADCA.REFCTRL = ADC_REFSEL_INT1V_gc;
 45a:	10 92 02 02 	sts	0x0202, r1
    ADCA.EVCTRL = 0;
 45e:	10 92 03 02 	sts	0x0203, r1
    ADCA.CTRLB = 0;
 462:	10 92 01 02 	sts	0x0201, r1
    ADCA.CTRLA = ADC_ENABLE_bm;
 466:	80 93 00 02 	sts	0x0200, r24



    PORTC.DIRSET = (1 << 0);
 46a:	80 93 41 06 	sts	0x0641, r24
    PORTC.OUTCLR = (1 << 0);
 46e:	80 93 46 06 	sts	0x0646, r24

    TCC0.CTRLA = 0x05;				//set TC_CLK to CLK/64 (500k)
 472:	20 93 00 08 	sts	0x0800, r18
    TCC0.CTRLB = TC0_CCAEN_bm | TC0_WGMODE0_bm | TC0_WGMODE1_bm;       //Enable OC A,B,C&D.  Set to Single Slope PWM
 476:	83 e1       	ldi	r24, 0x13	; 19
 478:	80 93 01 08 	sts	0x0801, r24
    TCC0.PER = 10000;				// (500k / 10k = 50 hz)  (500 bits per ms)
 47c:	80 e1       	ldi	r24, 0x10	; 16
 47e:	97 e2       	ldi	r25, 0x27	; 39
 480:	80 93 26 08 	sts	0x0826, r24
 484:	90 93 27 08 	sts	0x0827, r25
    TCC0.CCA = 750;
 488:	8e ee       	ldi	r24, 0xEE	; 238
 48a:	92 e0       	ldi	r25, 0x02	; 2
 48c:	80 93 28 08 	sts	0x0828, r24
 490:	90 93 29 08 	sts	0x0829, r25


    currentPORT.DIRSET = currentCS_bm |  currentCLK_bm | currentMOSI_bm;
 494:	80 eb       	ldi	r24, 0xB0	; 176
 496:	80 93 41 06 	sts	0x0641, r24
    currentPORT.OUTSET = currentCS_bm;
 49a:	80 e1       	ldi	r24, 0x10	; 16
 49c:	80 93 45 06 	sts	0x0645, r24

    currentSPI.CTRL = SPI_ENABLE_bm
 4a0:	83 e5       	ldi	r24, 0x53	; 83
 4a2:	80 93 c0 08 	sts	0x08C0, r24
                       | SPI_PRESCALER_DIV128_gc;




    outputPORT.DIRSET = usb_pin_bm | cam_pin_bm;
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	80 93 61 06 	sts	0x0661, r24
    outputPORT.OUTCLR = usb_pin_bm | cam_pin_bm;
 4ac:	80 93 66 06 	sts	0x0666, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b0:	2f ef       	ldi	r18, 0xFF	; 255
 4b2:	8f e4       	ldi	r24, 0x4F	; 79
 4b4:	93 ec       	ldi	r25, 0xC3	; 195
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <main+0x9e>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <main+0xa8>
 4c0:	00 00       	nop


    _delay_ms(2000);
    Interrupts_Init();
 4c2:	0e 94 bb 01 	call	0x376	; 0x376 <Interrupts_Init>
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
            switch (command) {
                case 'C':   // turn camera off
                    outputPORT.OUTSET = cam_pin_bm;
                    break;
                case 'c':   // turn camera on
                    outputPORT.OUTCLR = cam_pin_bm;
 4ca:	02 e0       	ldi	r16, 0x02	; 2
                case 'u':       // turn usb on
                    outputPORT.OUTCLR = usb_pin_bm;
                    break;
                case 's':
                    currentCapCounter = 0;
                    runServo = true;
 4cc:	11 e0       	ldi	r17, 0x01	; 1
                    printf("pressing button\r");
 4ce:	c5 e2       	ldi	r28, 0x25	; 37
 4d0:	d0 e2       	ldi	r29, 0x20	; 32
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	89 ef       	ldi	r24, 0xF9	; 249
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	80 40       	sbci	r24, 0x00	; 0
 4dc:	90 40       	sbci	r25, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <main+0xc0>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <main+0xca>
 4e2:	00 00       	nop

    while(true){
    
        
        _delay_ms(10);
        if(Debug_CharReadyToRead()){
 4e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Debug_CharReadyToRead>
 4e8:	88 23       	and	r24, r24
 4ea:	99 f3       	breq	.-26     	; 0x4d2 <main+0xba>
            command = Debug_GetByte(false);
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 0d 01 	call	0x21a	; 0x21a <Debug_GetByte>
 4f2:	80 93 39 20 	sts	0x2039, r24
            switch (command) {
 4f6:	83 36       	cpi	r24, 0x63	; 99
 4f8:	91 f0       	breq	.+36     	; 0x51e <main+0x106>
 4fa:	38 f4       	brcc	.+14     	; 0x50a <main+0xf2>
 4fc:	83 34       	cpi	r24, 0x43	; 67
 4fe:	61 f0       	breq	.+24     	; 0x518 <main+0x100>
 500:	85 35       	cpi	r24, 0x55	; 85
 502:	39 f7       	brne	.-50     	; 0x4d2 <main+0xba>
                    break;
                case 'c':   // turn camera on
                    outputPORT.OUTCLR = cam_pin_bm;
                    break;
                case 'U':       //turn usb off
                    outputPORT.OUTSET = usb_pin_bm;
 504:	10 93 65 06 	sts	0x0665, r17
                    break;
 508:	e4 cf       	rjmp	.-56     	; 0x4d2 <main+0xba>
    
        
        _delay_ms(10);
        if(Debug_CharReadyToRead()){
            command = Debug_GetByte(false);
            switch (command) {
 50a:	83 37       	cpi	r24, 0x73	; 115
 50c:	59 f0       	breq	.+22     	; 0x524 <main+0x10c>
 50e:	85 37       	cpi	r24, 0x75	; 117
 510:	01 f7       	brne	.-64     	; 0x4d2 <main+0xba>
                    break;
                case 'U':       //turn usb off
                    outputPORT.OUTSET = usb_pin_bm;
                    break;
                case 'u':       // turn usb on
                    outputPORT.OUTCLR = usb_pin_bm;
 512:	10 93 66 06 	sts	0x0666, r17
                    break;
 516:	dd cf       	rjmp	.-70     	; 0x4d2 <main+0xba>
        _delay_ms(10);
        if(Debug_CharReadyToRead()){
            command = Debug_GetByte(false);
            switch (command) {
                case 'C':   // turn camera off
                    outputPORT.OUTSET = cam_pin_bm;
 518:	00 93 65 06 	sts	0x0665, r16
                    break;
 51c:	da cf       	rjmp	.-76     	; 0x4d2 <main+0xba>
                case 'c':   // turn camera on
                    outputPORT.OUTCLR = cam_pin_bm;
 51e:	00 93 66 06 	sts	0x0666, r16
                    break;
 522:	d7 cf       	rjmp	.-82     	; 0x4d2 <main+0xba>
                    break;
                case 'u':       // turn usb on
                    outputPORT.OUTCLR = usb_pin_bm;
                    break;
                case 's':
                    currentCapCounter = 0;
 524:	10 92 36 20 	sts	0x2036, r1
                    runServo = true;
 528:	10 93 a2 20 	sts	0x20A2, r17
                    printf("pressing button\r");
 52c:	df 93       	push	r29
 52e:	cf 93       	push	r28
 530:	0e 94 9d 02 	call	0x53a	; 0x53a <printf>
                    break;
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	cc cf       	rjmp	.-104    	; 0x4d2 <main+0xba>

0000053a <printf>:
 53a:	a0 e0       	ldi	r26, 0x00	; 0
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	e3 ea       	ldi	r30, 0xA3	; 163
 540:	f2 e0       	ldi	r31, 0x02	; 2
 542:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__prologue_saves__+0x20>
 546:	fe 01       	movw	r30, r28
 548:	35 96       	adiw	r30, 0x05	; 5
 54a:	61 91       	ld	r22, Z+
 54c:	71 91       	ld	r23, Z+
 54e:	af 01       	movw	r20, r30
 550:	80 91 a7 20 	lds	r24, 0x20A7
 554:	90 91 a8 20 	lds	r25, 0x20A8
 558:	0e 94 b1 02 	call	0x562	; 0x562 <vfprintf>
 55c:	e2 e0       	ldi	r30, 0x02	; 2
 55e:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__epilogue_restores__+0x20>

00000562 <vfprintf>:
 562:	ac e0       	ldi	r26, 0x0C	; 12
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	e7 eb       	ldi	r30, 0xB7	; 183
 568:	f2 e0       	ldi	r31, 0x02	; 2
 56a:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__prologue_saves__>
 56e:	7c 01       	movw	r14, r24
 570:	6b 01       	movw	r12, r22
 572:	8a 01       	movw	r16, r20
 574:	fc 01       	movw	r30, r24
 576:	16 82       	std	Z+6, r1	; 0x06
 578:	17 82       	std	Z+7, r1	; 0x07
 57a:	83 81       	ldd	r24, Z+3	; 0x03
 57c:	81 ff       	sbrs	r24, 1
 57e:	bd c1       	rjmp	.+890    	; 0x8fa <vfprintf+0x398>
 580:	ce 01       	movw	r24, r28
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	4c 01       	movw	r8, r24
 586:	f7 01       	movw	r30, r14
 588:	93 81       	ldd	r25, Z+3	; 0x03
 58a:	f6 01       	movw	r30, r12
 58c:	93 fd       	sbrc	r25, 3
 58e:	85 91       	lpm	r24, Z+
 590:	93 ff       	sbrs	r25, 3
 592:	81 91       	ld	r24, Z+
 594:	6f 01       	movw	r12, r30
 596:	88 23       	and	r24, r24
 598:	09 f4       	brne	.+2      	; 0x59c <vfprintf+0x3a>
 59a:	ab c1       	rjmp	.+854    	; 0x8f2 <vfprintf+0x390>
 59c:	85 32       	cpi	r24, 0x25	; 37
 59e:	39 f4       	brne	.+14     	; 0x5ae <vfprintf+0x4c>
 5a0:	93 fd       	sbrc	r25, 3
 5a2:	85 91       	lpm	r24, Z+
 5a4:	93 ff       	sbrs	r25, 3
 5a6:	81 91       	ld	r24, Z+
 5a8:	6f 01       	movw	r12, r30
 5aa:	85 32       	cpi	r24, 0x25	; 37
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <vfprintf+0x56>
 5ae:	b7 01       	movw	r22, r14
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 5b6:	e7 cf       	rjmp	.-50     	; 0x586 <vfprintf+0x24>
 5b8:	51 2c       	mov	r5, r1
 5ba:	31 2c       	mov	r3, r1
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	20 32       	cpi	r18, 0x20	; 32
 5c0:	a0 f4       	brcc	.+40     	; 0x5ea <vfprintf+0x88>
 5c2:	8b 32       	cpi	r24, 0x2B	; 43
 5c4:	69 f0       	breq	.+26     	; 0x5e0 <vfprintf+0x7e>
 5c6:	30 f4       	brcc	.+12     	; 0x5d4 <vfprintf+0x72>
 5c8:	80 32       	cpi	r24, 0x20	; 32
 5ca:	59 f0       	breq	.+22     	; 0x5e2 <vfprintf+0x80>
 5cc:	83 32       	cpi	r24, 0x23	; 35
 5ce:	69 f4       	brne	.+26     	; 0x5ea <vfprintf+0x88>
 5d0:	20 61       	ori	r18, 0x10	; 16
 5d2:	2c c0       	rjmp	.+88     	; 0x62c <vfprintf+0xca>
 5d4:	8d 32       	cpi	r24, 0x2D	; 45
 5d6:	39 f0       	breq	.+14     	; 0x5e6 <vfprintf+0x84>
 5d8:	80 33       	cpi	r24, 0x30	; 48
 5da:	39 f4       	brne	.+14     	; 0x5ea <vfprintf+0x88>
 5dc:	21 60       	ori	r18, 0x01	; 1
 5de:	26 c0       	rjmp	.+76     	; 0x62c <vfprintf+0xca>
 5e0:	22 60       	ori	r18, 0x02	; 2
 5e2:	24 60       	ori	r18, 0x04	; 4
 5e4:	23 c0       	rjmp	.+70     	; 0x62c <vfprintf+0xca>
 5e6:	28 60       	ori	r18, 0x08	; 8
 5e8:	21 c0       	rjmp	.+66     	; 0x62c <vfprintf+0xca>
 5ea:	27 fd       	sbrc	r18, 7
 5ec:	27 c0       	rjmp	.+78     	; 0x63c <vfprintf+0xda>
 5ee:	30 ed       	ldi	r19, 0xD0	; 208
 5f0:	38 0f       	add	r19, r24
 5f2:	3a 30       	cpi	r19, 0x0A	; 10
 5f4:	78 f4       	brcc	.+30     	; 0x614 <vfprintf+0xb2>
 5f6:	26 ff       	sbrs	r18, 6
 5f8:	06 c0       	rjmp	.+12     	; 0x606 <vfprintf+0xa4>
 5fa:	fa e0       	ldi	r31, 0x0A	; 10
 5fc:	5f 9e       	mul	r5, r31
 5fe:	30 0d       	add	r19, r0
 600:	11 24       	eor	r1, r1
 602:	53 2e       	mov	r5, r19
 604:	13 c0       	rjmp	.+38     	; 0x62c <vfprintf+0xca>
 606:	8a e0       	ldi	r24, 0x0A	; 10
 608:	38 9e       	mul	r3, r24
 60a:	30 0d       	add	r19, r0
 60c:	11 24       	eor	r1, r1
 60e:	33 2e       	mov	r3, r19
 610:	20 62       	ori	r18, 0x20	; 32
 612:	0c c0       	rjmp	.+24     	; 0x62c <vfprintf+0xca>
 614:	8e 32       	cpi	r24, 0x2E	; 46
 616:	21 f4       	brne	.+8      	; 0x620 <vfprintf+0xbe>
 618:	26 fd       	sbrc	r18, 6
 61a:	6b c1       	rjmp	.+726    	; 0x8f2 <vfprintf+0x390>
 61c:	20 64       	ori	r18, 0x40	; 64
 61e:	06 c0       	rjmp	.+12     	; 0x62c <vfprintf+0xca>
 620:	8c 36       	cpi	r24, 0x6C	; 108
 622:	11 f4       	brne	.+4      	; 0x628 <vfprintf+0xc6>
 624:	20 68       	ori	r18, 0x80	; 128
 626:	02 c0       	rjmp	.+4      	; 0x62c <vfprintf+0xca>
 628:	88 36       	cpi	r24, 0x68	; 104
 62a:	41 f4       	brne	.+16     	; 0x63c <vfprintf+0xda>
 62c:	f6 01       	movw	r30, r12
 62e:	93 fd       	sbrc	r25, 3
 630:	85 91       	lpm	r24, Z+
 632:	93 ff       	sbrs	r25, 3
 634:	81 91       	ld	r24, Z+
 636:	6f 01       	movw	r12, r30
 638:	81 11       	cpse	r24, r1
 63a:	c1 cf       	rjmp	.-126    	; 0x5be <vfprintf+0x5c>
 63c:	98 2f       	mov	r25, r24
 63e:	9f 7d       	andi	r25, 0xDF	; 223
 640:	95 54       	subi	r25, 0x45	; 69
 642:	93 30       	cpi	r25, 0x03	; 3
 644:	28 f4       	brcc	.+10     	; 0x650 <vfprintf+0xee>
 646:	0c 5f       	subi	r16, 0xFC	; 252
 648:	1f 4f       	sbci	r17, 0xFF	; 255
 64a:	ff e3       	ldi	r31, 0x3F	; 63
 64c:	f9 83       	std	Y+1, r31	; 0x01
 64e:	0d c0       	rjmp	.+26     	; 0x66a <vfprintf+0x108>
 650:	83 36       	cpi	r24, 0x63	; 99
 652:	31 f0       	breq	.+12     	; 0x660 <vfprintf+0xfe>
 654:	83 37       	cpi	r24, 0x73	; 115
 656:	71 f0       	breq	.+28     	; 0x674 <vfprintf+0x112>
 658:	83 35       	cpi	r24, 0x53	; 83
 65a:	09 f0       	breq	.+2      	; 0x65e <vfprintf+0xfc>
 65c:	5b c0       	rjmp	.+182    	; 0x714 <vfprintf+0x1b2>
 65e:	22 c0       	rjmp	.+68     	; 0x6a4 <vfprintf+0x142>
 660:	f8 01       	movw	r30, r16
 662:	80 81       	ld	r24, Z
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	0e 5f       	subi	r16, 0xFE	; 254
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	44 24       	eor	r4, r4
 66c:	43 94       	inc	r4
 66e:	51 2c       	mov	r5, r1
 670:	54 01       	movw	r10, r8
 672:	15 c0       	rjmp	.+42     	; 0x69e <vfprintf+0x13c>
 674:	38 01       	movw	r6, r16
 676:	f2 e0       	ldi	r31, 0x02	; 2
 678:	6f 0e       	add	r6, r31
 67a:	71 1c       	adc	r7, r1
 67c:	f8 01       	movw	r30, r16
 67e:	a0 80       	ld	r10, Z
 680:	b1 80       	ldd	r11, Z+1	; 0x01
 682:	26 ff       	sbrs	r18, 6
 684:	03 c0       	rjmp	.+6      	; 0x68c <vfprintf+0x12a>
 686:	65 2d       	mov	r22, r5
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <vfprintf+0x12e>
 68c:	6f ef       	ldi	r22, 0xFF	; 255
 68e:	7f ef       	ldi	r23, 0xFF	; 255
 690:	c5 01       	movw	r24, r10
 692:	2c 87       	std	Y+12, r18	; 0x0c
 694:	0e 94 8e 04 	call	0x91c	; 0x91c <strnlen>
 698:	2c 01       	movw	r4, r24
 69a:	83 01       	movw	r16, r6
 69c:	2c 85       	ldd	r18, Y+12	; 0x0c
 69e:	2f 77       	andi	r18, 0x7F	; 127
 6a0:	22 2e       	mov	r2, r18
 6a2:	17 c0       	rjmp	.+46     	; 0x6d2 <vfprintf+0x170>
 6a4:	38 01       	movw	r6, r16
 6a6:	f2 e0       	ldi	r31, 0x02	; 2
 6a8:	6f 0e       	add	r6, r31
 6aa:	71 1c       	adc	r7, r1
 6ac:	f8 01       	movw	r30, r16
 6ae:	a0 80       	ld	r10, Z
 6b0:	b1 80       	ldd	r11, Z+1	; 0x01
 6b2:	26 ff       	sbrs	r18, 6
 6b4:	03 c0       	rjmp	.+6      	; 0x6bc <vfprintf+0x15a>
 6b6:	65 2d       	mov	r22, r5
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <vfprintf+0x15e>
 6bc:	6f ef       	ldi	r22, 0xFF	; 255
 6be:	7f ef       	ldi	r23, 0xFF	; 255
 6c0:	c5 01       	movw	r24, r10
 6c2:	2c 87       	std	Y+12, r18	; 0x0c
 6c4:	0e 94 83 04 	call	0x906	; 0x906 <strnlen_P>
 6c8:	2c 01       	movw	r4, r24
 6ca:	2c 85       	ldd	r18, Y+12	; 0x0c
 6cc:	20 68       	ori	r18, 0x80	; 128
 6ce:	22 2e       	mov	r2, r18
 6d0:	83 01       	movw	r16, r6
 6d2:	23 fc       	sbrc	r2, 3
 6d4:	1b c0       	rjmp	.+54     	; 0x70c <vfprintf+0x1aa>
 6d6:	83 2d       	mov	r24, r3
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	48 16       	cp	r4, r24
 6dc:	59 06       	cpc	r5, r25
 6de:	b0 f4       	brcc	.+44     	; 0x70c <vfprintf+0x1aa>
 6e0:	b7 01       	movw	r22, r14
 6e2:	80 e2       	ldi	r24, 0x20	; 32
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 6ea:	3a 94       	dec	r3
 6ec:	f4 cf       	rjmp	.-24     	; 0x6d6 <vfprintf+0x174>
 6ee:	f5 01       	movw	r30, r10
 6f0:	27 fc       	sbrc	r2, 7
 6f2:	85 91       	lpm	r24, Z+
 6f4:	27 fe       	sbrs	r2, 7
 6f6:	81 91       	ld	r24, Z+
 6f8:	5f 01       	movw	r10, r30
 6fa:	b7 01       	movw	r22, r14
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 702:	31 10       	cpse	r3, r1
 704:	3a 94       	dec	r3
 706:	f1 e0       	ldi	r31, 0x01	; 1
 708:	4f 1a       	sub	r4, r31
 70a:	51 08       	sbc	r5, r1
 70c:	41 14       	cp	r4, r1
 70e:	51 04       	cpc	r5, r1
 710:	71 f7       	brne	.-36     	; 0x6ee <vfprintf+0x18c>
 712:	e5 c0       	rjmp	.+458    	; 0x8de <vfprintf+0x37c>
 714:	84 36       	cpi	r24, 0x64	; 100
 716:	11 f0       	breq	.+4      	; 0x71c <vfprintf+0x1ba>
 718:	89 36       	cpi	r24, 0x69	; 105
 71a:	39 f5       	brne	.+78     	; 0x76a <vfprintf+0x208>
 71c:	f8 01       	movw	r30, r16
 71e:	27 ff       	sbrs	r18, 7
 720:	07 c0       	rjmp	.+14     	; 0x730 <vfprintf+0x1ce>
 722:	60 81       	ld	r22, Z
 724:	71 81       	ldd	r23, Z+1	; 0x01
 726:	82 81       	ldd	r24, Z+2	; 0x02
 728:	93 81       	ldd	r25, Z+3	; 0x03
 72a:	0c 5f       	subi	r16, 0xFC	; 252
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
 72e:	08 c0       	rjmp	.+16     	; 0x740 <vfprintf+0x1de>
 730:	60 81       	ld	r22, Z
 732:	71 81       	ldd	r23, Z+1	; 0x01
 734:	88 27       	eor	r24, r24
 736:	77 fd       	sbrc	r23, 7
 738:	80 95       	com	r24
 73a:	98 2f       	mov	r25, r24
 73c:	0e 5f       	subi	r16, 0xFE	; 254
 73e:	1f 4f       	sbci	r17, 0xFF	; 255
 740:	2f 76       	andi	r18, 0x6F	; 111
 742:	b2 2e       	mov	r11, r18
 744:	97 ff       	sbrs	r25, 7
 746:	09 c0       	rjmp	.+18     	; 0x75a <vfprintf+0x1f8>
 748:	90 95       	com	r25
 74a:	80 95       	com	r24
 74c:	70 95       	com	r23
 74e:	61 95       	neg	r22
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	20 68       	ori	r18, 0x80	; 128
 758:	b2 2e       	mov	r11, r18
 75a:	2a e0       	ldi	r18, 0x0A	; 10
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	a4 01       	movw	r20, r8
 760:	0e 94 cb 04 	call	0x996	; 0x996 <__ultoa_invert>
 764:	a8 2e       	mov	r10, r24
 766:	a8 18       	sub	r10, r8
 768:	44 c0       	rjmp	.+136    	; 0x7f2 <vfprintf+0x290>
 76a:	85 37       	cpi	r24, 0x75	; 117
 76c:	29 f4       	brne	.+10     	; 0x778 <vfprintf+0x216>
 76e:	2f 7e       	andi	r18, 0xEF	; 239
 770:	b2 2e       	mov	r11, r18
 772:	2a e0       	ldi	r18, 0x0A	; 10
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	25 c0       	rjmp	.+74     	; 0x7c2 <vfprintf+0x260>
 778:	f2 2f       	mov	r31, r18
 77a:	f9 7f       	andi	r31, 0xF9	; 249
 77c:	bf 2e       	mov	r11, r31
 77e:	8f 36       	cpi	r24, 0x6F	; 111
 780:	c1 f0       	breq	.+48     	; 0x7b2 <vfprintf+0x250>
 782:	18 f4       	brcc	.+6      	; 0x78a <vfprintf+0x228>
 784:	88 35       	cpi	r24, 0x58	; 88
 786:	79 f0       	breq	.+30     	; 0x7a6 <vfprintf+0x244>
 788:	b4 c0       	rjmp	.+360    	; 0x8f2 <vfprintf+0x390>
 78a:	80 37       	cpi	r24, 0x70	; 112
 78c:	19 f0       	breq	.+6      	; 0x794 <vfprintf+0x232>
 78e:	88 37       	cpi	r24, 0x78	; 120
 790:	21 f0       	breq	.+8      	; 0x79a <vfprintf+0x238>
 792:	af c0       	rjmp	.+350    	; 0x8f2 <vfprintf+0x390>
 794:	2f 2f       	mov	r18, r31
 796:	20 61       	ori	r18, 0x10	; 16
 798:	b2 2e       	mov	r11, r18
 79a:	b4 fe       	sbrs	r11, 4
 79c:	0d c0       	rjmp	.+26     	; 0x7b8 <vfprintf+0x256>
 79e:	8b 2d       	mov	r24, r11
 7a0:	84 60       	ori	r24, 0x04	; 4
 7a2:	b8 2e       	mov	r11, r24
 7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <vfprintf+0x256>
 7a6:	24 ff       	sbrs	r18, 4
 7a8:	0a c0       	rjmp	.+20     	; 0x7be <vfprintf+0x25c>
 7aa:	9f 2f       	mov	r25, r31
 7ac:	96 60       	ori	r25, 0x06	; 6
 7ae:	b9 2e       	mov	r11, r25
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <vfprintf+0x25c>
 7b2:	28 e0       	ldi	r18, 0x08	; 8
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <vfprintf+0x260>
 7b8:	20 e1       	ldi	r18, 0x10	; 16
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x260>
 7be:	20 e1       	ldi	r18, 0x10	; 16
 7c0:	32 e0       	ldi	r19, 0x02	; 2
 7c2:	f8 01       	movw	r30, r16
 7c4:	b7 fe       	sbrs	r11, 7
 7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <vfprintf+0x274>
 7c8:	60 81       	ld	r22, Z
 7ca:	71 81       	ldd	r23, Z+1	; 0x01
 7cc:	82 81       	ldd	r24, Z+2	; 0x02
 7ce:	93 81       	ldd	r25, Z+3	; 0x03
 7d0:	0c 5f       	subi	r16, 0xFC	; 252
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x280>
 7d6:	60 81       	ld	r22, Z
 7d8:	71 81       	ldd	r23, Z+1	; 0x01
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 5f       	subi	r16, 0xFE	; 254
 7e0:	1f 4f       	sbci	r17, 0xFF	; 255
 7e2:	a4 01       	movw	r20, r8
 7e4:	0e 94 cb 04 	call	0x996	; 0x996 <__ultoa_invert>
 7e8:	a8 2e       	mov	r10, r24
 7ea:	a8 18       	sub	r10, r8
 7ec:	fb 2d       	mov	r31, r11
 7ee:	ff 77       	andi	r31, 0x7F	; 127
 7f0:	bf 2e       	mov	r11, r31
 7f2:	b6 fe       	sbrs	r11, 6
 7f4:	0b c0       	rjmp	.+22     	; 0x80c <vfprintf+0x2aa>
 7f6:	2b 2d       	mov	r18, r11
 7f8:	2e 7f       	andi	r18, 0xFE	; 254
 7fa:	a5 14       	cp	r10, r5
 7fc:	50 f4       	brcc	.+20     	; 0x812 <vfprintf+0x2b0>
 7fe:	b4 fe       	sbrs	r11, 4
 800:	0a c0       	rjmp	.+20     	; 0x816 <vfprintf+0x2b4>
 802:	b2 fc       	sbrc	r11, 2
 804:	08 c0       	rjmp	.+16     	; 0x816 <vfprintf+0x2b4>
 806:	2b 2d       	mov	r18, r11
 808:	2e 7e       	andi	r18, 0xEE	; 238
 80a:	05 c0       	rjmp	.+10     	; 0x816 <vfprintf+0x2b4>
 80c:	7a 2c       	mov	r7, r10
 80e:	2b 2d       	mov	r18, r11
 810:	03 c0       	rjmp	.+6      	; 0x818 <vfprintf+0x2b6>
 812:	7a 2c       	mov	r7, r10
 814:	01 c0       	rjmp	.+2      	; 0x818 <vfprintf+0x2b6>
 816:	75 2c       	mov	r7, r5
 818:	24 ff       	sbrs	r18, 4
 81a:	0d c0       	rjmp	.+26     	; 0x836 <vfprintf+0x2d4>
 81c:	fe 01       	movw	r30, r28
 81e:	ea 0d       	add	r30, r10
 820:	f1 1d       	adc	r31, r1
 822:	80 81       	ld	r24, Z
 824:	80 33       	cpi	r24, 0x30	; 48
 826:	11 f4       	brne	.+4      	; 0x82c <vfprintf+0x2ca>
 828:	29 7e       	andi	r18, 0xE9	; 233
 82a:	09 c0       	rjmp	.+18     	; 0x83e <vfprintf+0x2dc>
 82c:	22 ff       	sbrs	r18, 2
 82e:	06 c0       	rjmp	.+12     	; 0x83c <vfprintf+0x2da>
 830:	73 94       	inc	r7
 832:	73 94       	inc	r7
 834:	04 c0       	rjmp	.+8      	; 0x83e <vfprintf+0x2dc>
 836:	82 2f       	mov	r24, r18
 838:	86 78       	andi	r24, 0x86	; 134
 83a:	09 f0       	breq	.+2      	; 0x83e <vfprintf+0x2dc>
 83c:	73 94       	inc	r7
 83e:	23 fd       	sbrc	r18, 3
 840:	13 c0       	rjmp	.+38     	; 0x868 <vfprintf+0x306>
 842:	20 ff       	sbrs	r18, 0
 844:	06 c0       	rjmp	.+12     	; 0x852 <vfprintf+0x2f0>
 846:	5a 2c       	mov	r5, r10
 848:	73 14       	cp	r7, r3
 84a:	18 f4       	brcc	.+6      	; 0x852 <vfprintf+0x2f0>
 84c:	53 0c       	add	r5, r3
 84e:	57 18       	sub	r5, r7
 850:	73 2c       	mov	r7, r3
 852:	73 14       	cp	r7, r3
 854:	68 f4       	brcc	.+26     	; 0x870 <vfprintf+0x30e>
 856:	b7 01       	movw	r22, r14
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	2c 87       	std	Y+12, r18	; 0x0c
 85e:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 862:	73 94       	inc	r7
 864:	2c 85       	ldd	r18, Y+12	; 0x0c
 866:	f5 cf       	rjmp	.-22     	; 0x852 <vfprintf+0x2f0>
 868:	73 14       	cp	r7, r3
 86a:	10 f4       	brcc	.+4      	; 0x870 <vfprintf+0x30e>
 86c:	37 18       	sub	r3, r7
 86e:	01 c0       	rjmp	.+2      	; 0x872 <vfprintf+0x310>
 870:	31 2c       	mov	r3, r1
 872:	24 ff       	sbrs	r18, 4
 874:	12 c0       	rjmp	.+36     	; 0x89a <vfprintf+0x338>
 876:	b7 01       	movw	r22, r14
 878:	80 e3       	ldi	r24, 0x30	; 48
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	2c 87       	std	Y+12, r18	; 0x0c
 87e:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 882:	2c 85       	ldd	r18, Y+12	; 0x0c
 884:	22 ff       	sbrs	r18, 2
 886:	17 c0       	rjmp	.+46     	; 0x8b6 <vfprintf+0x354>
 888:	21 ff       	sbrs	r18, 1
 88a:	03 c0       	rjmp	.+6      	; 0x892 <vfprintf+0x330>
 88c:	88 e5       	ldi	r24, 0x58	; 88
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <vfprintf+0x334>
 892:	88 e7       	ldi	r24, 0x78	; 120
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	b7 01       	movw	r22, r14
 898:	0c c0       	rjmp	.+24     	; 0x8b2 <vfprintf+0x350>
 89a:	82 2f       	mov	r24, r18
 89c:	86 78       	andi	r24, 0x86	; 134
 89e:	59 f0       	breq	.+22     	; 0x8b6 <vfprintf+0x354>
 8a0:	21 fd       	sbrc	r18, 1
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x346>
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <vfprintf+0x348>
 8a8:	8b e2       	ldi	r24, 0x2B	; 43
 8aa:	27 fd       	sbrc	r18, 7
 8ac:	8d e2       	ldi	r24, 0x2D	; 45
 8ae:	b7 01       	movw	r22, r14
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 8b6:	a5 14       	cp	r10, r5
 8b8:	38 f4       	brcc	.+14     	; 0x8c8 <vfprintf+0x366>
 8ba:	b7 01       	movw	r22, r14
 8bc:	80 e3       	ldi	r24, 0x30	; 48
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 8c4:	5a 94       	dec	r5
 8c6:	f7 cf       	rjmp	.-18     	; 0x8b6 <vfprintf+0x354>
 8c8:	aa 94       	dec	r10
 8ca:	f4 01       	movw	r30, r8
 8cc:	ea 0d       	add	r30, r10
 8ce:	f1 1d       	adc	r31, r1
 8d0:	80 81       	ld	r24, Z
 8d2:	b7 01       	movw	r22, r14
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 8da:	a1 10       	cpse	r10, r1
 8dc:	f5 cf       	rjmp	.-22     	; 0x8c8 <vfprintf+0x366>
 8de:	33 20       	and	r3, r3
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <vfprintf+0x382>
 8e2:	51 ce       	rjmp	.-862    	; 0x586 <vfprintf+0x24>
 8e4:	b7 01       	movw	r22, r14
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 99 04 	call	0x932	; 0x932 <fputc>
 8ee:	3a 94       	dec	r3
 8f0:	f6 cf       	rjmp	.-20     	; 0x8de <vfprintf+0x37c>
 8f2:	f7 01       	movw	r30, r14
 8f4:	86 81       	ldd	r24, Z+6	; 0x06
 8f6:	97 81       	ldd	r25, Z+7	; 0x07
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <vfprintf+0x39c>
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	9f ef       	ldi	r25, 0xFF	; 255
 8fe:	2c 96       	adiw	r28, 0x0c	; 12
 900:	e2 e1       	ldi	r30, 0x12	; 18
 902:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__epilogue_restores__>

00000906 <strnlen_P>:
 906:	fc 01       	movw	r30, r24
 908:	05 90       	lpm	r0, Z+
 90a:	61 50       	subi	r22, 0x01	; 1
 90c:	70 40       	sbci	r23, 0x00	; 0
 90e:	01 10       	cpse	r0, r1
 910:	d8 f7       	brcc	.-10     	; 0x908 <strnlen_P+0x2>
 912:	80 95       	com	r24
 914:	90 95       	com	r25
 916:	8e 0f       	add	r24, r30
 918:	9f 1f       	adc	r25, r31
 91a:	08 95       	ret

0000091c <strnlen>:
 91c:	fc 01       	movw	r30, r24
 91e:	61 50       	subi	r22, 0x01	; 1
 920:	70 40       	sbci	r23, 0x00	; 0
 922:	01 90       	ld	r0, Z+
 924:	01 10       	cpse	r0, r1
 926:	d8 f7       	brcc	.-10     	; 0x91e <strnlen+0x2>
 928:	80 95       	com	r24
 92a:	90 95       	com	r25
 92c:	8e 0f       	add	r24, r30
 92e:	9f 1f       	adc	r25, r31
 930:	08 95       	ret

00000932 <fputc>:
 932:	0f 93       	push	r16
 934:	1f 93       	push	r17
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	18 2f       	mov	r17, r24
 93c:	09 2f       	mov	r16, r25
 93e:	eb 01       	movw	r28, r22
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	81 fd       	sbrc	r24, 1
 944:	03 c0       	rjmp	.+6      	; 0x94c <fputc+0x1a>
 946:	8f ef       	ldi	r24, 0xFF	; 255
 948:	9f ef       	ldi	r25, 0xFF	; 255
 94a:	20 c0       	rjmp	.+64     	; 0x98c <fputc+0x5a>
 94c:	82 ff       	sbrs	r24, 2
 94e:	10 c0       	rjmp	.+32     	; 0x970 <fputc+0x3e>
 950:	4e 81       	ldd	r20, Y+6	; 0x06
 952:	5f 81       	ldd	r21, Y+7	; 0x07
 954:	2c 81       	ldd	r18, Y+4	; 0x04
 956:	3d 81       	ldd	r19, Y+5	; 0x05
 958:	42 17       	cp	r20, r18
 95a:	53 07       	cpc	r21, r19
 95c:	7c f4       	brge	.+30     	; 0x97c <fputc+0x4a>
 95e:	e8 81       	ld	r30, Y
 960:	f9 81       	ldd	r31, Y+1	; 0x01
 962:	9f 01       	movw	r18, r30
 964:	2f 5f       	subi	r18, 0xFF	; 255
 966:	3f 4f       	sbci	r19, 0xFF	; 255
 968:	28 83       	st	Y, r18
 96a:	39 83       	std	Y+1, r19	; 0x01
 96c:	10 83       	st	Z, r17
 96e:	06 c0       	rjmp	.+12     	; 0x97c <fputc+0x4a>
 970:	e8 85       	ldd	r30, Y+8	; 0x08
 972:	f9 85       	ldd	r31, Y+9	; 0x09
 974:	81 2f       	mov	r24, r17
 976:	09 95       	icall
 978:	89 2b       	or	r24, r25
 97a:	29 f7       	brne	.-54     	; 0x946 <fputc+0x14>
 97c:	2e 81       	ldd	r18, Y+6	; 0x06
 97e:	3f 81       	ldd	r19, Y+7	; 0x07
 980:	2f 5f       	subi	r18, 0xFF	; 255
 982:	3f 4f       	sbci	r19, 0xFF	; 255
 984:	2e 83       	std	Y+6, r18	; 0x06
 986:	3f 83       	std	Y+7, r19	; 0x07
 988:	81 2f       	mov	r24, r17
 98a:	90 2f       	mov	r25, r16
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	08 95       	ret

00000996 <__ultoa_invert>:
 996:	fa 01       	movw	r30, r20
 998:	aa 27       	eor	r26, r26
 99a:	28 30       	cpi	r18, 0x08	; 8
 99c:	51 f1       	breq	.+84     	; 0x9f2 <__ultoa_invert+0x5c>
 99e:	20 31       	cpi	r18, 0x10	; 16
 9a0:	81 f1       	breq	.+96     	; 0xa02 <__ultoa_invert+0x6c>
 9a2:	e8 94       	clt
 9a4:	6f 93       	push	r22
 9a6:	6e 7f       	andi	r22, 0xFE	; 254
 9a8:	6e 5f       	subi	r22, 0xFE	; 254
 9aa:	7f 4f       	sbci	r23, 0xFF	; 255
 9ac:	8f 4f       	sbci	r24, 0xFF	; 255
 9ae:	9f 4f       	sbci	r25, 0xFF	; 255
 9b0:	af 4f       	sbci	r26, 0xFF	; 255
 9b2:	b1 e0       	ldi	r27, 0x01	; 1
 9b4:	3e d0       	rcall	.+124    	; 0xa32 <__ultoa_invert+0x9c>
 9b6:	b4 e0       	ldi	r27, 0x04	; 4
 9b8:	3c d0       	rcall	.+120    	; 0xa32 <__ultoa_invert+0x9c>
 9ba:	67 0f       	add	r22, r23
 9bc:	78 1f       	adc	r23, r24
 9be:	89 1f       	adc	r24, r25
 9c0:	9a 1f       	adc	r25, r26
 9c2:	a1 1d       	adc	r26, r1
 9c4:	68 0f       	add	r22, r24
 9c6:	79 1f       	adc	r23, r25
 9c8:	8a 1f       	adc	r24, r26
 9ca:	91 1d       	adc	r25, r1
 9cc:	a1 1d       	adc	r26, r1
 9ce:	6a 0f       	add	r22, r26
 9d0:	71 1d       	adc	r23, r1
 9d2:	81 1d       	adc	r24, r1
 9d4:	91 1d       	adc	r25, r1
 9d6:	a1 1d       	adc	r26, r1
 9d8:	20 d0       	rcall	.+64     	; 0xa1a <__ultoa_invert+0x84>
 9da:	09 f4       	brne	.+2      	; 0x9de <__ultoa_invert+0x48>
 9dc:	68 94       	set
 9de:	3f 91       	pop	r19
 9e0:	2a e0       	ldi	r18, 0x0A	; 10
 9e2:	26 9f       	mul	r18, r22
 9e4:	11 24       	eor	r1, r1
 9e6:	30 19       	sub	r19, r0
 9e8:	30 5d       	subi	r19, 0xD0	; 208
 9ea:	31 93       	st	Z+, r19
 9ec:	de f6       	brtc	.-74     	; 0x9a4 <__ultoa_invert+0xe>
 9ee:	cf 01       	movw	r24, r30
 9f0:	08 95       	ret
 9f2:	46 2f       	mov	r20, r22
 9f4:	47 70       	andi	r20, 0x07	; 7
 9f6:	40 5d       	subi	r20, 0xD0	; 208
 9f8:	41 93       	st	Z+, r20
 9fa:	b3 e0       	ldi	r27, 0x03	; 3
 9fc:	0f d0       	rcall	.+30     	; 0xa1c <__ultoa_invert+0x86>
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__ultoa_invert+0x5c>
 a00:	f6 cf       	rjmp	.-20     	; 0x9ee <__ultoa_invert+0x58>
 a02:	46 2f       	mov	r20, r22
 a04:	4f 70       	andi	r20, 0x0F	; 15
 a06:	40 5d       	subi	r20, 0xD0	; 208
 a08:	4a 33       	cpi	r20, 0x3A	; 58
 a0a:	18 f0       	brcs	.+6      	; 0xa12 <__ultoa_invert+0x7c>
 a0c:	49 5d       	subi	r20, 0xD9	; 217
 a0e:	31 fd       	sbrc	r19, 1
 a10:	40 52       	subi	r20, 0x20	; 32
 a12:	41 93       	st	Z+, r20
 a14:	02 d0       	rcall	.+4      	; 0xa1a <__ultoa_invert+0x84>
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__ultoa_invert+0x6c>
 a18:	ea cf       	rjmp	.-44     	; 0x9ee <__ultoa_invert+0x58>
 a1a:	b4 e0       	ldi	r27, 0x04	; 4
 a1c:	a6 95       	lsr	r26
 a1e:	97 95       	ror	r25
 a20:	87 95       	ror	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	ba 95       	dec	r27
 a28:	c9 f7       	brne	.-14     	; 0xa1c <__ultoa_invert+0x86>
 a2a:	00 97       	sbiw	r24, 0x00	; 0
 a2c:	61 05       	cpc	r22, r1
 a2e:	71 05       	cpc	r23, r1
 a30:	08 95       	ret
 a32:	9b 01       	movw	r18, r22
 a34:	ac 01       	movw	r20, r24
 a36:	0a 2e       	mov	r0, r26
 a38:	06 94       	lsr	r0
 a3a:	57 95       	ror	r21
 a3c:	47 95       	ror	r20
 a3e:	37 95       	ror	r19
 a40:	27 95       	ror	r18
 a42:	ba 95       	dec	r27
 a44:	c9 f7       	brne	.-14     	; 0xa38 <__ultoa_invert+0xa2>
 a46:	62 0f       	add	r22, r18
 a48:	73 1f       	adc	r23, r19
 a4a:	84 1f       	adc	r24, r20
 a4c:	95 1f       	adc	r25, r21
 a4e:	a0 1d       	adc	r26, r0
 a50:	08 95       	ret

00000a52 <__prologue_saves__>:
 a52:	2f 92       	push	r2
 a54:	3f 92       	push	r3
 a56:	4f 92       	push	r4
 a58:	5f 92       	push	r5
 a5a:	6f 92       	push	r6
 a5c:	7f 92       	push	r7
 a5e:	8f 92       	push	r8
 a60:	9f 92       	push	r9
 a62:	af 92       	push	r10
 a64:	bf 92       	push	r11
 a66:	cf 92       	push	r12
 a68:	df 92       	push	r13
 a6a:	ef 92       	push	r14
 a6c:	ff 92       	push	r15
 a6e:	0f 93       	push	r16
 a70:	1f 93       	push	r17
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	cd b7       	in	r28, 0x3d	; 61
 a78:	de b7       	in	r29, 0x3e	; 62
 a7a:	ca 1b       	sub	r28, r26
 a7c:	db 0b       	sbc	r29, r27
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	de bf       	out	0x3e, r29	; 62
 a82:	09 94       	ijmp

00000a84 <__epilogue_restores__>:
 a84:	2a 88       	ldd	r2, Y+18	; 0x12
 a86:	39 88       	ldd	r3, Y+17	; 0x11
 a88:	48 88       	ldd	r4, Y+16	; 0x10
 a8a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a8c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a8e:	7d 84       	ldd	r7, Y+13	; 0x0d
 a90:	8c 84       	ldd	r8, Y+12	; 0x0c
 a92:	9b 84       	ldd	r9, Y+11	; 0x0b
 a94:	aa 84       	ldd	r10, Y+10	; 0x0a
 a96:	b9 84       	ldd	r11, Y+9	; 0x09
 a98:	c8 84       	ldd	r12, Y+8	; 0x08
 a9a:	df 80       	ldd	r13, Y+7	; 0x07
 a9c:	ee 80       	ldd	r14, Y+6	; 0x06
 a9e:	fd 80       	ldd	r15, Y+5	; 0x05
 aa0:	0c 81       	ldd	r16, Y+4	; 0x04
 aa2:	1b 81       	ldd	r17, Y+3	; 0x03
 aa4:	aa 81       	ldd	r26, Y+2	; 0x02
 aa6:	b9 81       	ldd	r27, Y+1	; 0x01
 aa8:	ce 0f       	add	r28, r30
 aaa:	d1 1d       	adc	r29, r1
 aac:	cd bf       	out	0x3d, r28	; 61
 aae:	de bf       	out	0x3e, r29	; 62
 ab0:	ed 01       	movw	r28, r26
 ab2:	08 95       	ret

00000ab4 <_exit>:
 ab4:	f8 94       	cli

00000ab6 <__stop_program>:
 ab6:	ff cf       	rjmp	.-2      	; 0xab6 <__stop_program>
